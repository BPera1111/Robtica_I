simulacion_traj

dt=0.1;

%Interpolación articular ROBOT 1
q0 = CinInv(T0, R1, q_ref, 1);
q1 = CinInv(T1, R1, q_ref, 1);
q2 = CinInv(T2, R1, q_ref, 1);
q3 = CinInv(T3, R1, q_ref, 1);
q4 = CinInv(T4, R1, q_ref, 1);

[q_traj1, qd1, qdd1] = mtraj(@lspb, q0, q1, 0:0.1:1);
[aux1, aux2, aux3] = mtraj(@lspb, q1, q0, 0:0.1:1);
[q_traj1, qd1, qdd1] = concatenar_traj(q_traj1, qd1, qdd1, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q0, q2, 0:0.1:4);
[q_traj1, qd1, qdd1] = concatenar_traj(q_traj1, qd1, qdd1, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb,q2, q3, 0:0.1:1);
[q_traj1, qd1, qdd1] = concatenar_traj(q_traj1, qd1, qdd1, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb,q3, q4, 0:0.1:1);
[q_traj1, qd1, qdd1] = concatenar_traj(q_traj1, qd1, qdd1, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb,q4, q3, 0:0.1:1);
[q_traj1, qd1, qdd1] = concatenar_traj(q_traj1, qd1, qdd1, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb,q3, q2, 0:0.1:1);
[q_traj1, qd1, qdd1] = concatenar_traj(q_traj1, qd1, qdd1, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb,q2, q0, 0:0.1:2);
[q_traj1, qd1, qdd1] = concatenar_traj(q_traj1, qd1, qdd1, aux1, aux2, aux3);

% T_traj1_art = R1.fkine(q_traj1).double;
% x1_art = zeros(1,size(T_traj1_art,3));
% y1_art = zeros(1,size(T_traj1_art,3));
% z1_art = zeros(1,size(T_traj1_art,3));
% %Posición del efector
% for i=1:size(T_traj1_art,3)
%     x1_art(i) = T_traj1_art(1,4,i);
%     y1_art(i) = T_traj1_art(2,4,i);
%     z1_art(i) = T_traj1_art(3,4,i);
% end
% 
% %Cálculo de la velocidad del efector mediante derivación numérica
% [row, col] = size(x1_art);
% v1_x = zeros(size(x1_art));
% v1_y = zeros(size(x1_art));
% v1_z = zeros(size(x1_art));
% v1 = zeros(size(x1_art));
% for c = 1:col-1
%     v1_x(1,c) = (x1_art(1,c+1) - x1_art(1,c))/dt; 
%     v1_y(1,c) = (y1_art(1,c+1) - y1_art(1,c))/dt;
%     v1_z(1,c) = (z1_art(1,c+1) - z1_art(1,c))/dt; 
% end
% %Cálculo del módulo de la velocidad
% for c = 1:col
%     v1(1,c) = sqrt(v1_x(1,c)^2 + v1_y(1,c)^2 + v1_z(1,c)^2);
% end
% 
% %Cálculo de la aceleración del efector mediante derivación numérica
% a1_x = zeros(size(x1_art));
% a1_y = zeros(size(x1_art));
% a1_z = zeros(size(x1_art));
% a1 = zeros(size(x1_art));
% for c = 1:col-1
%     a1_x(1,c) = (v1_x(1,c+1) - v1_x(1,c))/dt; 
%     a1_y(1,c) = (v1_y(1,c+1) - v1_y(1,c))/dt;
%     a1_z(1,c) = (v1_z(1,c+1) - v1_z(1,c))/dt; 
% end
% %Cálculo del módulo de la aceleración
% for c = 1:col
%     a1(1,c) = sqrt(a1_x(1,c)^2 + a1_y(1,c)^2 + a1_z(1,c)^2);
% end
% 
% 
% 
% %Gráficas ROBOT 1
% figure()
% title('Posición articular - ROBOT 1')
% qplot(q_traj1)
% xlabel('')
% grid on
% 
% figure()
% title('Velocidad articular - ROBOT 1')
% qplot(qd1)
% ylabel('Velocidad articular [rad/s]')
% xlabel('')
% grid on
% 
% figure()
% title('Aceleración articular - ROBOT 1')
% qplot(qdd1)
% ylabel('Aceleración articular [rad/s^2]')
% xlabel('')
% grid on
% 
% figure()
% plot(x1_art)
% hold on
% plot(y1_art)
% hold on
% plot(z1_art)
% title('Posición del efector - ROBOT 1')
% legend('x', 'y', 'z')
% grid on
% ylabel('Posición [m]')
% 
% figure()
% plot(v1)
% title('Velocidad del efector - ROBOT 1')
% grid on
% ylabel('Velocidad [m/s]')
% 
% figure()
% plot(a1)
% title('Aceleración del efector - ROBOT 1')
% grid on
% ylabel('Aceleración [m/s^2]')


%Interpolación articular ROBOT 2
q2_0 = CinInv(T2_0, R2, q_ref, 1);
q2_1 = CinInv(T2_1, R2, q_ref, 1);
q2_2 = CinInv(T2_2, R2, q_ref, 1);
q2_3 = CinInv(T2_3, R2, q_ref, 1);
q2_4 = CinInv(T2_4, R2, q2_3, 1);
q2_5 = CinInv(T2_5, R2, q2_4, 1);
q2_6 = CinInv(T2_6, R2, q2_5, 1);

[q_traj2, qd2, qdd2] = mtraj(@lspb, q2_0, q2_1, 0:0.1:1);
[aux1, aux2, aux3] = mtraj(@lspb, q2_1, q2_2, 0:0.1:1);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_2, q2_1, 0:0.1:1);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_1, q2_0, 0:0.1:1);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_0, q2_3, 0:0.1:2);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_3, q2_4, 0:0.1:1.5);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_4, q2_5, 0:0.1:1);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_5, q2_6, 0:0.1:1);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_6, q2_5, 0:0.1:1);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_5, q2_4, 0:0.1:1);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q2_4, q2_0, 0:0.1:3);
[q_traj2, qd2, qdd2] = concatenar_traj(q_traj2, qd2, qdd2, aux1, aux2, aux3);

% 
% T_traj2_art = R2.fkine(q_traj2).double;
% x2_art = zeros(1,size(T_traj2_art,3));
% y2_art = zeros(1,size(T_traj2_art,3));
% z2_art = zeros(1,size(T_traj2_art,3));
% 
% %Posición del efector
% for i=1:size(T_traj2_art,3)
%     x2_art(i) = T_traj2_art(1,4,i);
%     y2_art(i) = T_traj2_art(2,4,i);
%     z2_art(i) = T_traj2_art(3,4,i);
% end
% 
% %Cálculo de la velocidad del efector mediante derivación numérica
% [row, col] = size(x2_art);
% v2_x = zeros(size(x2_art));
% v2_y = zeros(size(x2_art));
% v2_z = zeros(size(x2_art));
% v2 = zeros(size(x2_art));
% for c = 1:col-1
%     v2_x(1,c) = (x2_art(1,c+1) - x2_art(1,c))/dt; 
%     v2_y(1,c) = (y2_art(1,c+1) - y2_art(1,c))/dt;
%     v2_z(1,c) = (z2_art(1,c+1) - z2_art(1,c))/dt; 
% end
% %Cálculo del módulo de la velocidad
% for c = 1:col
%     v2(1,c) = sqrt(v2_x(1,c)^2 + v2_y(1,c)^2 + v2_z(1,c)^2);
% end
% 
% %Cálculo de la aceleración del efector mediante derivación numérica
% a2_x = zeros(size(x2_art));
% a2_y = zeros(size(x2_art));
% a2_z = zeros(size(x2_art));
% a2 = zeros(size(x2_art));
% for c = 1:col-1
%     a2_x(1,c) = (v2_x(1,c+1) - v2_x(1,c))/dt; 
%     a2_y(1,c) = (v2_y(1,c+1) - v2_y(1,c))/dt;
%     a2_z(1,c) = (v2_z(1,c+1) - v2_z(1,c))/dt; 
% end
% %Cálculo del módulo de la aceleración
% for c = 1:col
%     a2(1,c) = sqrt(a2_x(1,c)^2 + a2_y(1,c)^2 + a2_z(1,c)^2);
% end
% 
% %Gráficas ROBOT 2
% figure()
% title('Posición articular - ROBOT 2')
% qplot(q_traj2)
% xlabel('')
% grid on
% 
% figure()
% title('Velocidad articular - ROBOT 2')
% qplot(qd2)
% ylabel('Velocidad articular [rad/s]')
% xlabel('')
% grid on
% 
% figure()
% title('Aceleración articular - ROBOT 2')
% qplot(qdd2)
% ylabel('Aceleración articular [rad/s^2]')
% xlabel('')
% grid on
% 
% figure()
% plot(x2_art)
% hold on
% plot(y2_art)
% hold on
% plot(z2_art)
% title('Posición del efector - ROBOT 2')
% legend('x', 'y', 'z')
% grid on
% ylabel('Posición [m]')
% 
% figure()
% plot(v2)
% title('Velocidad del efector - ROBOT 2')
% grid on
% ylabel('Velocidad [m/s]')
% 
% figure()
% plot(a2)
% title('Aceleración del efector - ROBOT 2')
% grid on
% ylabel('Aceleración [m/s^2]')


%Interpolación articular ROBOT 3
q3_0 = CinInv(T3_0,R3, q_ref, 1);
q3_1 = CinInv(T3_1,R3, q3_0, 1);
q3_2 = CinInv(T3_2, R3, q3_1, 1);
q3_3 = CinInv(T3_3, R3, q3_2, 1);
q3_4 = CinInv(T3_4, R3, q3_3, 1);

[q_traj3,qd3,qdd3] = mtraj(@lspb, q3_0, q3_1, 0:0.1:1);
[aux1, aux2, aux3] = mtraj(@lspb, q3_1, q3_2, 0:0.1:1);
[q_traj3, qd3, qdd3] = concatenar_traj(q_traj3, qd3, qdd3, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q3_2, q3_1, 0:0.1:1);
[q_traj3, qd3, qdd3] = concatenar_traj(q_traj3, qd3, qdd3, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q3_1, q3_0, 0:0.1:1);
[q_traj3, qd3, qdd3] = concatenar_traj(q_traj3, qd3, qdd3, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q3_0, q3_3, 0:0.1:1);
[q_traj3, qd3, qdd3] = concatenar_traj(q_traj3, qd3, qdd3, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q3_3, q3_4, 0:0.1:1);
[q_traj3, qd3, qdd3] = concatenar_traj(q_traj3, qd3, qdd3, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q3_4, q3_3, 0:0.1:1);
[q_traj3, qd3, qdd3] = concatenar_traj(q_traj3, qd3, qdd3, aux1, aux2, aux3);
[aux1, aux2, aux3] = mtraj(@lspb, q3_3, q3_0, 0:0.1:1);
[q_traj3, qd3, qdd3] = concatenar_traj(q_traj3, qd3, qdd3, aux1, aux2, aux3);


% W = [-3 5 -3 10 -3 5];
% figure()
% R1.plot(q0,'workspace',W,'scale',0.5,'jointdiam',0.5,'notiles','noname')
% hold on
% R2.plot(q2_0,'workspace',W, 'scale',0.5,'jointdiam',0.5,'notiles','noname')
% hold on
% R3.plot(q3_0,'workspace',W, 'scale',0.5,'jointdiam',0.5,'notiles', 'noname')
% hold on
% trplot(eye(4)) % Sistema de referencia.
% %Plotea las trayectorias una a una 
% R1.plot(q_traj1,'workspace',W,'scale',0.5,'jointdiam',0.5,'notiles') % Ploteo del modelo.
% R2.plot(q_traj2,'workspace',W, 'scale',0.5,'jointdiam',0.5,'notiles')
% R3.plot(q_traj3,'workspace',W, 'scale',0.5,'jointdiam',0.5,'notiles')


%DESCOMENTAR SI SE QUIERE REALIZAR UNA ANIMACIÓN DE LAS TRAYECTORIAS
%DE TODOS LOS ROBOTS SIMULTÁNEAMENTE (EL GRÁFICO SE VE LENTO PERO EN EL
%ARCHIVO SE VE BIEN)
% index_1 = 1;
% index_2 = 1;
% index_3 = 1;
% while(1)
%     if index_1 <= size(q_traj1,1)
%        R1.plot(q_traj1(index_1,:))
%     else
%         R1.plot(q_traj1(end, :))
%     end 
%     if index_2 <= size(q_traj2,1)
%        R2.plot(q_traj2(index_2,:))
%     else
%         R2.plot(q_traj2(end,:))
%     end
%     if index_3 <= size(q_traj3,1)
%        R3.plot(q_traj3(index_3,:)) 
%     else
%         R3.plot(q_traj3(end,:))
%     end
%     R2.plot(q_traj2(index_2,:))
%     R3.plot(q_traj3(index_3,:))
%      index_1 = index_1 + 1;
%      index_2 = index_2 + 1;
%      index_3 = index_3 + 1;
%     if(index_1 > size(q_traj1,1))
%         index_1 = 1;
%     end
%     if(index_2 > size(q_traj2,1))
%         index_2 = 1;
%     end
%     if(index_3 > size(q_traj3,1))
%         index_3 = 1;
%     end
%       if(index_1 > size(q_traj1,1) && index_2>size(q_traj2,1) && index_3 > size(q_traj3,1))
%           disp("Saliendo")
%           break
%       end
% end